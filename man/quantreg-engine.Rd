% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/linear_reg-quantreg.R
\name{quantreg-engine}
\alias{quantreg-engine}
\title{Linear quantile regression via quantreg}
\description{
\code{\link[quantreg:rq]{quantreg::rq()}} is used to estimate a linear model using quantile loss.
}
\section{Tuning Parameters}{


This model has no tuning parameters.:
}

\section{Translation from parsnip to the original package}{


\if{html}{\out{<div class="sourceCode r">}}\preformatted{linear_reg(mode = "quantile regression", engine = "quantreg") \%>\%
  translate()
#> Linear Regression Model Specification (quantile regression)
#> 
#> Computational engine: quantreg 
#> 
#> Model fit template:
#> quantreg::rq(formula = missing_arg(), data = missing_arg(), weights = missing_arg(), 
#>     method = "br", tau = c(0.1, 0.5, 0.9), na.action = stats::na.omit, 
#>     model = FALSE)
}\if{html}{\out{</div>}}
}

\section{Case weights}{


Case weights are maybe? supported for quantile regression with this engine.
}

\examples{
tib <- data.frame(
  y = rnorm(100), x = rnorm(100), z = rnorm(100),
  f = factor(sample(letters[1:3], 100, replace = TRUE))
)
spec <- linear_reg(engine = "quantreg", mode = "quantile regression")
out <- fit(spec, formula = y ~ x + z, data = tib)
predict(out, new_data = tib[1:5, ])

# -- adjusting the desired quantiles

spec <- linear_reg(mode = "quantile regression") \%>\%
  set_engine(engine = "quantreg", tau = c(1:9 / 10))
out <- fit(spec, formula = y ~ x + z, data = tib)
predict(out, new_data = tib[1:5, ])

}
