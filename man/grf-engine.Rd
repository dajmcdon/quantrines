% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rand_forest-grf.R
\name{grf-engine}
\alias{grf-engine}
\title{Random quantile forests via grf}
\description{
\code{\link[grf:quantile_forest]{grf::quantile_forest()}} fits random forests in a way that makes it easy
to calculate \emph{quantile} forests.
}
\section{Tuning Parameters}{


This model has 3 tuning parameters:
\itemize{
\item \code{mtry}: # Randomly Selected Predictors (type: integer, default: see below)
\item \code{trees}: # Trees (type: integer, default: 2000L)
\item \code{min_n}: Minimal Node Size (type: integer, default: 5)
}

\code{mtry} depends on the number of columns in the design matrix.
The default in \code{\link[grf:quantile_forest]{grf::quantile_forest()}} is \code{min(ceiling(sqrt(ncol(X)) + 20), ncol(X))}.

For categorical predictors, a one-hot encoding is always used. This makes
splitting efficient, but has implications for the \code{mtry} choice. A factor
with many levels will become a large number of columns in the design matrix
which means that some of these may be selected frequently for potential splits.
This is different than in other implementations of random forest. For more
details, see \href{https://grf-labs.github.io/grf/articles/categorical_inputs.html}{the \code{grf} discussion}.
}

\section{Translation from parsnip to the original package}{


\if{html}{\out{<div class="sourceCode r">}}\preformatted{rand_forest(
  mode = "quantile regression",
  mtry = integer(1),
  trees = integer(1),
  min_n = integer(1)
) \%>\%
  set_engine("grf") \%>\%
  translate()
#> Random Forest Model Specification (quantile regression)
#> 
#> Main Arguments:
#>   mtry = integer(1)
#>   trees = integer(1)
#>   min_n = integer(1)
#> 
#> Computational engine: grf 
#> 
#> Model fit template:
#> grf::quantile_forest(x = missing_arg(), y = missing_arg(), mtry = min_cols(~integer(1), 
#>     x), num.trees = integer(1), min.node.size = min_rows(~integer(1), 
#>     x), quantiles = c(0.1, 0.5, 0.9), num.threads = 1L, seed = stats::runif(1, 
#>     0, .Machine$integer.max))
}\if{html}{\out{</div>}}
}

\section{Case weights}{


Case weights are not supported for quantile regression with this engine.
}

\examples{
library(grf)
tib <- data.frame(
  y = rnorm(100), x = rnorm(100), z = rnorm(100),
  f = factor(sample(letters[1:3], 100, replace = TRUE))
)
spec <- rand_forest(engine = "grf", mode = "quantile regression")
out <- fit(spec, formula = y ~ x + z, data = tib)
predict(out, new_data = tib[1:5, ])

# -- adjusting the desired quantiles

spec <- rand_forest(mode = "quantile regression") \%>\%
  set_engine(engine = "grf", quantiles = c(1:9 / 10))
out <- fit(spec, formula = y ~ x + z, data = tib)
predict(out, new_data = tib[1:5, ])

# -- standard regression
spec <- rand_forest(mode = "regression", engine = "grf")
out <- fit(spec, formula = y ~ x + z, data = tib)
predict(out, new_data = tib[1:5, ])

# -- classification
tib$y_binary <- factor(as.numeric(tib$y >= 0))
spec <- rand_forest(mode = "classification", engine = "grf")
out <- fit(spec, formula = y_binary ~ x + z, data = tib)
predict(out, new_data = tib[1:5, ], type = "class")
predict(out, new_data = tib[1:5, ], type = "prob")

}
